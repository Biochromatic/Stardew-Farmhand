<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StardewModdingAPI</name>
    </assembly>
    <members>
        <member name="M:StardewModdingAPI.Command.#ctor(System.String,System.String,System.String[])">
            <summary>
                Creates a Command from a Name, Description, and Arguments
            </summary>
            <param name="cname">Name</param>
            <param name="cdesc">Description</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:StardewModdingAPI.Command.CallCommand(System.String)">
            <summary>
                Calls the specified command. (It runs the command)
            </summary>
            <param name="input">The command to run</param>
        </member>
        <member name="M:StardewModdingAPI.Command.RegisterCommand(System.String,System.String,System.String[])">
            <summary>
                Registers a command to the list of commands properly
            </summary>
            <param name="command">Name of the command to register</param>
            <param name="cdesc">Description</param>
            <param name="args">Arguments (these are purely for viewing so that a user can see what an argument needs to be)</param>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.Command.FindCommand(System.String)">
            <summary>
                Looks up a command in the list of registered commands. Returns null if it doesn't exist (I think)
            </summary>
            <param name="name">Name of command to find</param>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.Command.Fire">
            <summary>
                Runs a command. Fires it. Calls it. Any of those.
            </summary>
        </member>
        <member name="M:StardewModdingAPI.Config.LoadConfig``1">
            <summary>
                Loads the config from the json blob on disk, updating and re-writing to the disk if needed.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.Config.GenerateDefaultConfig``1">
            <summary>
                MUST be implemented in inheriting class!
            </summary>
        </member>
        <member name="M:StardewModdingAPI.Config.UpdateConfig``1">
            <summary>
                Merges a default-value config with the user-config on disk.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.ConfigExtensions.InitializeConfig``1(``0,System.String)">
            <summary>
                Initializes an instance of any class that inherits from Config.
                This method performs the loading, saving, and merging of the config on the disk and in memory at a default state.
                This method should not be used to re-load or to re-save a config.
                NOTE: You MUST set your config EQUAL to the return of this method!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseConfig"></param>
            <param name="configLocation"></param>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.ConfigExtensions.WriteConfig``1(``0)">
            <summary>
                Writes a config to a json blob on the disk specified in the config's properties.
            </summary>
        </member>
        <member name="M:StardewModdingAPI.ConfigExtensions.ReloadConfig``1(``0)">
            <summary>
                Re-reads the json blob on the disk and merges its values with a default config.
                NOTE: You MUST set your config EQUAL to the return of this method!
            </summary>
        </member>
        <member name="T:StardewModdingAPI.Constants">
            <summary>
                Static class containing readonly values.
            </summary>
        </member>
        <member name="F:StardewModdingAPI.Constants.ModsLoaded">
            <summary>
                Not quite "constant", but it makes more sense for it to be here, at least for now
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.DataPath">
            <summary>
                Stardew Valley's roaming app data location.
                %AppData%//StardewValley
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ExecutionPath">
            <summary>
                Execution path to execute the code.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ConsoleTitle">
            <summary>
                Title for the API console
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.LogDir">
            <summary>
                Path for log files to be output to.
                %LocalAppData%//StardewValley//ErrorLogs
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.EnableDrawingIntoRenderTarget">
            <summary>
                Whether or not to enable the Render Target drawing code offered by ClxS
                Do not mark as 'const' or else 'if' checks will complain that the expression is always true in ReSharper
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.EnableCompletelyOverridingBaseCalls">
            <summary>
            Completely overrides the base game's draw call to the one is SGame
            </summary>
        </member>
        <member name="T:StardewModdingAPI.Entities.SPlayer">
            <summary>
                Static class for intergrating with the player
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Entities.SPlayer.AllFarmers">
            <summary>
            Calls 'getAllFarmers' in Game1
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Entities.SPlayer.CurrentFarmer">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Entities.SPlayer.Player">
            <summary>
            Gets the current player from Game1
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Entities.SPlayer.CurrentFarmerLocation">
            <summary>
            Gets the player's current location from Game1
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.UpdateTick">
            <summary>
                Fires every update (1/60 of a second)
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.SecondUpdateTick">
            <summary>
                Fires every other update (1/30 of a second)
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.FourthUpdateTick">
            <summary>
                Fires every fourth update (1/15 of a second)
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.EighthUpdateTick">
            <summary>
                Fires every eighth update (roughly 1/8 of a second)
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.QuarterSecondTick">
            <summary>
                Fires every fifthteenth update (1/4 of a second)
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.HalfSecondTick">
            <summary>
                Fires every thirtieth update (1/2 of a second)
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.OneSecondTick">
            <summary>
                Fires every sixtieth update (a second)
            </summary>
        </member>
        <member name="T:StardewModdingAPI.Events.GraphicsEvents">
            <summary>
            
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.Resize">
            <summary>
            Occurs when the form (game) is resized.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderEvent">
            <summary>
            Occurs before anything is drawn.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderGuiEvent">
            <summary>
            Occurs before the GUI is drawn.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderGuiEvent">
            <summary>
            Occurs after the GUI is drawn.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderHudEvent">
            <summary>
            Occurs before the HUD is drawn.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderHudEvent">
            <summary>
            Occurs after the HUD is drawn.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderEvent">
            <summary>
            Occurs after everything is drawn.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderGuiEventNoCheck">
            <summary>
            Occurs before the GUI is drawn. Does not check for conditional statements.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderGuiEventNoCheck">
            <summary>
            Occurs after the GUI is drawn. Does not check for conditional statements.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderHudEventNoCheck">
            <summary>
            Occurs before the HUD is drawn. Does not check for conditional statements.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderHudEventNoCheck">
            <summary>
            Occurs after the HUD is drawn. Does not check for conditional statements.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.DrawDebug">
            <summary>
            Draws when SGame.Debug is true. F3 toggles this.
            Game1.spriteBatch.Begin() is pre-called.
            Do not make end or begin calls to the spritebatch.
            If you are only trying to add debug information, use SGame.DebugMessageQueue in your Update loop.
            </summary>
        </member>
        <member name="E:StardewModdingAPI.Events.TimeEvents.OnNewDay">
            <summary>
            Occurs when Game1.newDay changes. True directly before saving, and False directly after.
            </summary>
        </member>
        <member name="M:StardewModdingAPI.Inheritance.Menus.SBobberBar.#ctor(System.Int32,System.Single,System.Boolean,System.Int32)">
            <summary>
                DO NOT CONSTRUCT THIS CLASS
                To retrieve an instance of SBobberBar, use SBobberBar.ConstructFromBaseClass()
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.Menus.SBobberBar.bobberPosition">
            <summary>
                The green rectangle bar that moves up and down
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.Menus.SBobberBar.distanceFromCatching">
            <summary>
                The green bar on the right. How close to catching the fish you are
                Range: 0 - 1 | 1 = catch, 0 = fail
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.Menus.SBobberBar.treasure">
            <summary>
                Whether or not a treasure chest appears
            </summary>
        </member>
        <member name="T:StardewModdingAPI.Inheritance.SGame">
            <summary>
            The 'SGame' class.
            This summary, and many others, only exists because XML doc tags.
            </summary>
        </member>
        <member name="F:StardewModdingAPI.Inheritance.SGame.LowestModItemID">
            <summary>
            Useless right now.
            </summary>
        </member>
        <member name="F:StardewModdingAPI.Inheritance.SGame.PreviouslyPressedButtons">
            <summary>
            Gets a jagged array of all buttons pressed on the gamepad the prior frame.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.ModItems">
            <summary>
            Useless at this time.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.KStateNow">
            <summary>
            The current KeyboardState
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.KStatePrior">
            <summary>
            The prior KeyboardState
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.MStateNow">
            <summary>
            The current MouseState
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.MStatePrior">
            <summary>
            The prior MouseState
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.CurrentlyPressedKeys">
            <summary>
            All keys pressed on the current frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviouslyPressedKeys">
            <summary>
            All keys pressed on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.FramePressedKeys">
            <summary>
            All keys pressed on this frame except for the ones pressed on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.FrameReleasedKeys">
            <summary>
            All keys pressed on the prior frame except for the ones pressed on the current frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviouslyLoadedGame">
            <summary>
            Whether or not a save was tagged as 'Loaded' the prior frame.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousGameLocations">
            <summary>
            The list of GameLocations on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousLocationObjects">
            <summary>
            The list of GameObjects on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousItems">
            <summary>
            The list of Items in the player's inventory on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousCombatLevel">
            <summary>
            The player's Combat level on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousFarmingLevel">
            <summary>
            The player's Farming level on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousFishingLevel">
            <summary>
            The player's Fishing level on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousForagingLevel">
            <summary>
            The player's Foraging level on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousMiningLevel">
            <summary>
            The player's Mining level on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousLuckLevel">
            <summary>
            The player's Luck level on the prior frame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousGameLocation">
            <summary>
            The player's previous game location
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousActiveMenu">
            <summary>
            The previous ActiveGameMenu in Game1
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousMineLevel">
            <summary>
            The previous mine level
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousTimeOfDay">
            <summary>
            The previous TimeOfDay (Int32 between 600 and 2400?)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousDayOfMonth">
            <summary>
            The previous DayOfMonth (Int32 between 1 and 28?)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousSeasonOfYear">
            <summary>
            The previous Season (String as follows: "winter", "spring", "summer", "fall")
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousYearOfGame">
            <summary>
            The previous Year
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousIsNewDay">
            <summary>
            The previous result of Game1.newDay
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.PreviousFarmer">
            <summary>
            The previous 'Farmer' (Player)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.CurrentUpdateTick">
            <summary>
            The current index of the update tick. Recycles every 60th tick to 0. (Int32 between 0 and 59)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.FirstUpdate">
            <summary>
            Whether or not this update frame is the very first of the entire game
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.Screen">
            <summary>
            The current RenderTarget in Game1 (Private field, uses reflection)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.BgColour">
            <summary>
            The current Colour in Game1 (Private field, uses reflection)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.Instance">
            <summary>
            Static accessor for an Instance of the class SGame
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.FramesPerSecond">
            <summary>
            The game's FPS. Re-determined every Draw update.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.Debug">
            <summary>
            Whether or not we're in a pseudo 'debug' mode. Mostly for displaying information like FPS.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.CurrentFarmer">
            <summary>
            The current player (equal to Farmer.Player)
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.GetStaticFields">
            <summary>
            Gets ALL static fields that belong to 'Game1'
            </summary>
        </member>
        <member name="M:StardewModdingAPI.Inheritance.SGame.GetButtonsDown(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets an array of all Buttons pressed on a joystick
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.Inheritance.SGame.GetFramePressedButtons(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets all buttons that were pressed on the current frame of a joystick
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.Inheritance.SGame.GetFrameReleasedButtons(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets all buttons that were released on the current frame of a joystick
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:StardewModdingAPI.Inheritance.SGame.DrawFarmBuildings">
            <summary>
            
            </summary>
        </member>
        <member name="F:StardewModdingAPI.Inheritance.SGame.DrawHUD">
            <summary>
            
            </summary>
        </member>
        <member name="F:StardewModdingAPI.Inheritance.SGame.DrawDialogueBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Inheritance.SGame.ZoomLevelIsOne">
            <summary>
            Whether or not the game's zoom level is 1.0f
            </summary>
        </member>
        <member name="M:StardewModdingAPI.Inheritance.SGame.QueueDebugMessage(System.String)">
            <summary>
            Queue's a message to be drawn in Debug mode (F3)
            </summary>
            <returns></returns>
        </member>
        <member name="M:StardewModdingAPI.Log.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
                Catch unhandled exception from the application
            </summary>
            <remarks>Should be moved out of here if we do more than just log the exception.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Log.Application_ThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
                Catch thread exception from the application
            </summary>
            <remarks>Should be moved out of here if we do more than just log the exception.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Log.SyncColour(System.Object,System.ConsoleColor)">
            <summary>
                NOTICE: Sync logging is discouraged. Please use Async instead.
            </summary>
            <param name="message">Message to log</param>
            <param name="colour">Colour of message</param>
        </member>
        <member name="T:StardewModdingAPI.LogWriter">
            <summary>
                A Logging class implementing the Singleton pattern and an internal Queue to be flushed perdiodically
            </summary>
        </member>
        <member name="M:StardewModdingAPI.LogWriter.#ctor">
            <summary>
                Private to prevent creation of other instances
            </summary>
        </member>
        <member name="P:StardewModdingAPI.LogWriter.Instance">
            <summary>
                Exposes _instace and creates a new one if it is null
            </summary>
        </member>
        <member name="M:StardewModdingAPI.LogWriter.WriteToLog(System.String)">
            <summary>
                Writes into the ConcurrentQueue the Message specified
            </summary>
            <param name="message">The message to write to the log</param>
        </member>
        <member name="M:StardewModdingAPI.LogWriter.WriteToLog(StardewModdingAPI.LogInfo)">
            <summary>
                Writes into the ConcurrentQueue the Entry specified
            </summary>
            <param name="logEntry">The logEntry to write to the log</param>
        </member>
        <member name="M:StardewModdingAPI.LogWriter.FlushLog">
            <summary>
                Flushes the ConcurrentQueue to the log file specified in Constants
            </summary>
        </member>
        <member name="T:StardewModdingAPI.LogInfo">
            <summary>
                A struct to store the message and the Date and Time the log entry was created
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.Name">
            <summary>
                The name of your mod.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.Authour">
            <summary>
                The name of the mod's authour.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.Version">
            <summary>
                The version of the mod.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.Description">
            <summary>
                A description of the mod.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.UniqueID">
            <summary>
                The unique ID of the mod. It doesn't *need* to be anything.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.PerSaveConfigs">
            <summary>
                Whether or not the mod uses per-save-config files.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Manifest.EntryDll">
            <summary>
                The name of the DLL in the directory that has the Entry() method.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.Manifest">
            <summary>
                The mod's manifest
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.PathOnDisk">
            <summary>
                Where the mod is located on the disk.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.BaseConfigPath">
            <summary>
                A basic path to store your mod's config at.
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.PerSaveConfigFolder">
            <summary>
                A basic path to where per-save configs are stored
            </summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.PerSaveConfigPath">
            <summary>
                A basic path to store your mod's config at, dependent on the current save.
                The Manifest must allow for per-save configs. This is to keep from having an
                empty directory in every mod folder.
            </summary>
        </member>
        <member name="M:StardewModdingAPI.Mod.Entry(System.Object[])">
            <summary>
                A basic method that is the entry-point of your mod. It will always be called once when the mod loads.
            </summary>
        </member>
    </members>
</doc>
